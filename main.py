from aiogram.contrib.fsm_storage.memory import MemoryStorage

from google_sheet import *
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Command
import config
import keyboard
import logging


storage = MemoryStorage()
bot = Bot(config.TOKEN)
dispatcher = Dispatcher(bot, storage=storage)
logging.basicConfig(filename='log.txt', filemode='a',
                    format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.INFO)


@dispatcher.message_handler(Command('start'))
async def welcome(message):
    await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚¨áÔ∏è',
                           reply_markup=keyboard.get_start(), parse_mode='Markdown')


@dispatcher.callback_query_handler(text_contains="category")
async def category(call: types.CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text=f'–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞',
                           reply_markup=keyboard.get_button(keyboard.new), parse_mode='Markdown')


@dispatcher.callback_query_handler(text_contains="trademark")
async def trademark(call: types.CallbackQuery):
    list_rows = get_cell(worksheet, call.data[1:])
    await bot.send_message(chat_id=call.message.chat.id,
                           text='–ß—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥üëå –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: '
                                '–ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å '
                                '–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞ —Å –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏‚ò∫Ô∏è')
    for row in list_rows:
        await bot.send_message(chat_id=call.message.chat.id, text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {row[0]}\n'
                                                                  f'–°–∫–∏–¥–∫–∞: {row[3]}\n'
                                                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {row[7]}\n'
                                                                  f'–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {row[5]}\n'
                                                                  f'–†–µ–≥–∏–æ–Ω: {row[6]}\n'
                                                                  f'–°—Å—ã–ª–∫–∞: {row[4]}\n'
                                                                  f'–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∏–∂–µüëá')
        await bot.send_message(chat_id=call.message.chat.id, text=f'{row[2]}')
    buttons = [
        types.InlineKeyboardButton(text=f"{list_rows[0][8]}", callback_data=f's{list_rows[0][8]}'),
        types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='get_start')
    ]
    keyboard_ = types.InlineKeyboardMarkup(row_width=1)
    keyboard_.add(*buttons)
    await bot.send_message(chat_id=call.message.chat.id, text='–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏',
                           reply_markup=keyboard_, parse_mode='Markdown')


if __name__ == "__main__":
    executor.start_polling(dispatcher, skip_updates=True)
